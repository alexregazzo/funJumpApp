const WORDS = [
  "Nam",
  "non",
  "fringilla",
  "magna",
  "a",
  "aliquet",
  "leo",
  "Nunc",
  "varius",
  "bibendum",
  "lobortis",
  "Nam",
  "vulputate",
  "vulputate",
  "lectus",
  "ut",
  "ultrices",
  "Mauris",
  "interdum",
  "mattis",
  "lorem",
  "ac",
  "porttitor",
  "dui",
  "finibus",
  "id",
  "Mauris",
  "id",
  "sodales",
  "dui",
  "id",
  "feugiat",
  "orci",
  "Duis",
  "eget",
  "diam",
  "sit",
  "amet",
  "ligula",
  "tincidunt",
  "volutpat",
  "in",
  "non",
  "arcu",
  "In",
  "magna",
  "lacus",
  "posuere",
  "at",
  "euismod",
  "quis",
  "dignissim",
  "et",
  "risus",
  "Praesent",
  "consequat",
  "odio",
  "eleifend",
  "augue",
  "posuere",
  "nec",
  "pharetra",
  "metus",
  "tincidunt",
  "Sed",
  "aliquet",
  "ex",
  "a",
  "varius",
  "aliquam",
  "Vivamus",
  "sit",
  "amet",
  "sollicitudin",
  "ante",
  "Quisque",
  "pellentesque",
  "vehicula",
  "sapien",
  "eget",
  "venenatis",
  "sem",
  "lacinia",
  "ut",
  "Cras",
  "commodo",
  "massa",
  "nec",
  "quam",
  "gravida",
  "fermentum",
  "Nam",
  "maximus",
  "purus",
  "lectus",
  "Donec",
  "sed",
  "euismod",
  "mi",
  "Ut",
  "eu",
  "nulla",
  "in",
  "neque",
  "dictum",
  "vehicula",
  "Nulla",
  "dignissim",
  "dolor",
  "eu",
  "libero",
  "hendrerit",
  "placerat",
  "Aliquam",
  "non",
  "fringilla",
  "enim",
  "sed",
  "volutpat",
  "ipsum",
  "Maecenas",
  "fringilla",
  "eleifend",
  "mattis",
  "Duis",
  "sed",
  "arcu",
  "ac",
  "lorem",
  "sagittis",
  "efficitur",
  "Duis",
  "quis",
  "magna",
  "neque",
  "Aenean",
  "at",
  "mi",
  "orci",
  "Maecenas",
  "consectetur",
  "convallis",
  "posuere",
  "Nulla",
  "in",
  "semper",
  "purus",
  "Integer",
  "sed",
  "molestie",
  "enim",
  "Suspendisse",
  "et",
  "massa",
  "ut",
  "tellus",
  "rutrum",
  "eleifend",
  "eget",
  "non",
  "purus",
  "Pellentesque",
  "habitant",
  "morbi",
  "tristique",
  "senectus",
  "et",
  "netus",
  "et",
  "malesuada",
  "fames",
  "ac",
  "turpis",
  "egestas",
  "Donec",
  "dapibus",
  "ipsum",
  "vitae",
  "erat",
  "venenatis",
  "non",
  "ultrices",
  "eros",
  "aliquet",
  "Etiam",
  "tincidunt",
  "tristique",
  "nisi",
  "ac",
  "dictum",
  "ex",
  "mattis",
  "in",
  "Morbi",
  "vel",
  "egestas",
  "purus",
  "Curabitur",
  "cursus",
  "purus",
  "vitae",
  "pretium",
  "convallis",
  "sem",
  "nunc",
  "blandit",
  "libero",
  "at",
  "fringilla",
  "metus",
  "augue",
  "vel",
  "nunc",
  "Maecenas",
  "venenatis",
  "luctus",
  "diam",
  "at",
  "sollicitudin",
  "purus",
  "cursus",
  "sed",
  "Quisque",
  "id",
  "mollis",
  "ipsum",
  "quis",
  "viverra",
  "mi",
  "Quisque",
  "lectus",
  "ante",
  "viverra",
  "ut",
  "commodo",
  "volutpat",
  "tempor",
  "nec",
  "velit",
  "Nunc",
  "a",
  "molestie",
  "libero",
  "sed",
  "placerat",
  "diam",
  "Phasellus",
  "porta",
  "mollis",
  "nisi",
  "sit",
  "amet",
  "vehicula",
  "Proin",
  "scelerisque",
  "scelerisque",
  "tortor",
  "sit",
  "amet",
  "dignissim",
  "Mauris",
  "semper",
  "fringilla",
  "risus",
  "eu",
  "semper",
  "Sed",
  "luctus",
  "nunc",
  "non",
  "turpis",
  "accumsan",
  "eu",
  "varius",
  "lectus",
  "pulvinar",
  "Pellentesque",
  "tristique",
  "nisl",
  "at",
  "lectus",
  "posuere",
  "hendrerit",
  "Aliquam",
  "vitae",
  "tellus",
  "id",
  "ante",
  "pretium",
  "feugiat",
  "Suspendisse",
  "luctus",
  "cursus",
  "elit",
  "Integer",
  "egestas",
  "consequat",
  "turpis",
  "in",
  "maximus",
  "ex",
  "suscipit",
  "eu",
  "Curabitur",
  "semper",
  "imperdiet",
  "justo",
  "vitae",
  "posuere",
  "nibh",
  "vestibulum",
  "non",
  "Maecenas",
  "enim",
  "justo",
  "suscipit",
  "a",
  "pulvinar",
  "vel",
  "mattis",
  "id",
  "leo",
  "Vivamus",
  "sagittis",
  "maximus",
  "metus",
  "at",
  "posuere",
  "elit",
  "dapibus",
  "finibus",
  "Etiam",
  "laoreet",
  "leo",
  "quis",
  "libero",
  "dictum",
  "in",
  "molestie",
  "felis",
  "volutpat",
  "Aenean",
  "vel",
  "hendrerit",
  "erat",
  "Vestibulum",
  "ornare",
  "a",
  "lacus",
  "vitae",
  "auctor",
  "Mauris",
  "euismod",
  "leo",
  "et",
  "ligula",
  "eleifend",
  "dictum",
  "In",
  "a",
  "placerat",
  "metus",
  "ut",
  "convallis",
  "velit",
  "Aliquam",
  "erat",
  "volutpat",
  "Donec",
  "egestas",
  "tincidunt",
  "quam",
  "In",
  "porta",
  "dapibus",
  "ante",
  "a",
  "tempor",
  "tortor",
  "aliquam",
  "eu",
  "Quisque",
  "bibendum",
  "libero",
  "ac",
  "porttitor",
  "pellentesque",
  "Suspendisse",
  "feugiat",
  "enim",
  "at",
  "tincidunt",
  "sagittis",
  "Praesent",
  "nec",
  "odio",
  "pellentesque",
  "pulvinar",
  "lorem",
  "a",
  "fermentum",
  "tellus",
  "Sed",
  "malesuada",
  "est",
  "quis",
  "pulvinar",
  "finibus",
  "Curabitur",
  "ut",
  "tortor",
  "vulputate",
  "lacus",
  "ornare",
  "hendrerit",
  "Integer",
  "venenatis",
  "nisi",
  "ac",
  "velit",
  "consequat",
  "vehicula",
  "Etiam",
  "eget",
  "eros",
  "luctus",
  "euismod",
  "nisi",
  "mattis",
  "vestibulum",
  "mi",
  "In",
  "blandit",
  "id",
  "elit",
  "nec",
  "viverra",
  "Donec",
  "quis",
  "nibh",
  "quis",
  "ex",
  "fermentum",
  "imperdiet",
  "Proin",
  "feugiat",
  "volutpat",
  "nisi",
  "et",
  "efficitur",
  "ante",
  "vulputate",
  "non",
  "Aenean",
  "bibendum",
  "mauris",
  "vel",
  "ligula",
  "scelerisque",
  "rhoncus",
  "Sed",
  "efficitur",
  "tortor",
  "eu",
  "rutrum",
  "porta",
  "magna",
  "tortor",
  "cursus",
  "risus",
  "ut",
  "pharetra",
  "neque",
  "risus",
  "laoreet",
  "arcu",
  "Sed",
  "vel",
  "vulputate",
  "mauris",
  "Orci",
  "varius",
  "natoque",
  "penatibus",
  "et",
  "magnis",
  "dis",
  "parturient",
  "montes",
  "nascetur",
  "ridiculus",
  "mus",
  "Curabitur",
  "molestie",
  "risus",
  "magna",
  "Ut",
  "metus",
  "turpis",
  "fringilla",
];

export function generateLoremIpsumRandom(min, max = null) {
  return generateLoremIpsum(generateRandomNumber(min, max));
}

export function generateLoremIpsum(amount) {
  return new Array(amount)
    .fill(0)
    .map(() => WORDS[Math.floor(Math.random() * WORDS.length)])
    .join(" ");
}
export function generateDateString() {
  return `${(1 + Math.floor(Math.random() * 29))
    .toString()
    .padStart(2, "0")}/${(1 + Math.floor(Math.random() * 12))
    .toString()
    .padStart(2, "0")}/20${Math.floor(Math.random() * 20)
    .toString()
    .padStart(2, "0")}`;
}

export function generateTimeString() {
  return `${Math.floor(Math.random() * 24)
    .toString()
    .padStart(2, "0")}:${Math.floor(Math.random() * 60)
    .toString()
    .padStart(2, "0")}:${Math.floor(Math.random() * 60)
    .toString()
    .padStart(2, "0")}`;
}

export function generateDateTimeISOString() {
  const t = new Date().getTime();
  return new Date(t - generateRandomNumber(t)).toISOString();
}

export function generateRandomNumber(min, max = null) {
  if (max === null) {
    max = min;
    min = 0;
  }
  if (min > max) {
    const aux = max;
    max = min;
    min = aux;
  }
  return min + Math.floor(Math.random() * (max - min));
}

export function capitalize(text) {
  return text
    .split(" ")
    .map((str) => str.charAt(0).toUpperCase() + str.slice(1))
    .join(" ");
}
